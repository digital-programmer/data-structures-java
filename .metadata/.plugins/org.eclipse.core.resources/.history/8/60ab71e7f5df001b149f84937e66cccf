package concepts;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;



public class TreeTest {

	public static void main(String[] args) {
		TreeNode<Integer> root = new TreeNode<>(4);
		TreeNode<Integer> node1 = new TreeNode<>(2);
		TreeNode<Integer> node2 = new TreeNode<>(3);
		TreeNode<Integer> node3 = new TreeNode<>(1);
		TreeNode<Integer> node4 = new TreeNode<>(5);
		TreeNode<Integer> node5 = new TreeNode<>(6);
		
		root.children.add(node1);							//   	   4
		root.children.add(node2);							// 	     / | \
		root.children.add(node3);							//     2   3   1  
		node2.children.add(node4);							//        / \
		node2.children.add(node5);							//  	 5   6
		
		
		printTreePreOrder(root);
		System.out.println(noOfNodes(root));
		
	}
	
	
	public static TreeNode<Integer> takeInput() {
		Scanner sc = new Scanner(System.in);
		Queue<TreeNode<Integer>> pendingNodes = new LinkedList<>();
		
		System.out.println("Enter root data: ");
		int rootData = sc.nextInt();
		if (rootData == -1) {
			return null;
		}
		
		TreeNode<Integer> root = new TreeNode<>(rootData);
		pendingNodes.add(root);
		
		while (!pendingNodes.isEmpty()) {
			TreeNode<Integer> front = pendingNodes.poll();
			System.out.println("Enter no. of children for "+ front.data+" : ");
			int numChild = sc.nextInt();
			
			for (int i=0; i < numChild; i++) {
				System.out.println("For "+ front.data + ",  Enter child " + (i+1) +" : ");
				int childData = sc.nextInt();
				TreeNode<Integer> child = new TreeNode<Integer>(childData);
				front.children.add(child);
				pendingNodes.add(child);
			}
			
		}
		
		sc.close();
		return root;
	}
	
	public static void printTreePreOrder(TreeNode<Integer> root) {
		if(root==null) {
			return;
		}
		
		System.out.print(root.data+" : ");
		
		for(int i=0;i<root.children.size();i++) {
			System.out.print(root.children.get(i).data+ " ");
		}		
		System.out.println();
		
		for(int i=0;i<root.children.size();i++) {
			printTreePreOrder(root.children.get(i));
		}
		
	}
	
	public static int noOfNodes(TreeNode<Integer> root) {
		if (root==null) {
			return 0;
		}
		int count = 1;
		for(int i=0;i<root.children.size();i++) {
			int childCount = noOfNodes(root.children.get(i));
			count += childCount;
		}
		
		return count;
	}
}
